Index: app/src/main/java/com/mobile/gympraaktis/ui/challenge/ResultChallengeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mobile.gympraaktis.ui.challenge\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport com.mobile.gympraaktis.R\nimport com.mobile.gympraaktis.base.BaseFragment\nimport com.mobile.gympraaktis.data.entities.PlayerEntity\nimport com.mobile.gympraaktis.data.entities.RoutineEntity\nimport com.mobile.gympraaktis.databinding.FragmentResultChallengeBinding\nimport com.mobile.gympraaktis.domain.entities.DetailResult\nimport com.mobile.gympraaktis.domain.extension.makeToast\nimport com.mobile.gympraaktis.domain.extension.onClick\nimport com.mobile.gympraaktis.domain.extension.show\nimport com.mobile.gympraaktis.domain.extension.showOrReplace\nimport com.mobile.gympraaktis.ui.challenge.vm.ResultChallengeFragmentViewModel\nimport com.mobile.gympraaktis.ui.details.view.ChallengeInstructionFragment\n\nimport com.praaktis.exerciseengine.Engine.ExerciseEngineActivity\nimport com.praaktis.exerciseengine.Engine.Outputs.DetailPoint\nimport com.praaktis.exerciseengine.Engine.Outputs.Measurement\nimport com.praaktis.exerciseengine.Player.VideoReplayActivity\nimport timber.log.Timber\n\nclass ResultChallengeFragment constructor(override val layoutId: Int = R.layout.fragment_result_challenge) :\n    BaseFragment<FragmentResultChallengeBinding>() {\n\n    companion object {\n        const val TAG = \"ResultChallengeFragment\"\n\n        @JvmStatic\n        fun getInstance(challengeItem: RoutineEntity, player: PlayerEntity): Fragment {\n            val fragment = ResultChallengeFragment()\n            val bundle = Bundle()\n            bundle.putSerializable(\"challengeItem\", challengeItem)\n            bundle.putSerializable(\"player\", player)\n            fragment.arguments = bundle\n            return fragment\n        }\n    }\n\n    override val mViewModel: ResultChallengeFragmentViewModel by viewModels()\n\n    private val challengeItem by lazy { requireArguments().getSerializable(\"challengeItem\") as RoutineEntity }\n    private val player by lazy { requireArguments().getSerializable(\"player\") as PlayerEntity }\n    private val result by lazy { activity.intent.getSerializableExtra(ChallengeInstructionFragment.CHALLENGE_RESULT) as HashMap<String, Any>? }\n    private val path by lazy { activity.intent.getStringExtra(ChallengeInstructionFragment.RAW_VIDEO_PATH) }\n    private val pathTest by lazy { activity.intent.getStringExtra(ChallengeInstructionFragment.VIDEO_PATH) }\n    private val videoId by lazy { activity.intent.getStringExtra(ChallengeInstructionFragment.VIDEO_ID) }\n\n    override fun initUI(savedInstanceState: Bundle?) {\n        initToolbar()\n        initVideoView()\n        initClicks()\n    }\n\n    private fun initToolbar() {\n        activity.setSupportActionBar(binding.toolbar)\n        activity.supportActionBar?.setDisplayHomeAsUpEnabled(true)\n        activity.supportActionBar?.setDisplayShowTitleEnabled(false)\n        binding.toolbar.setNavigationOnClickListener { activity.finish() }\n    }\n\n    private fun initVideoView() {\n        if (result != null) {\n            val detailResults = collectDetailResults()\n            val measurements = collectMeasurements()\n            val scoreOverAll =\n                getOverallScore()\n            binding.tvYourScore.text =\n                \"Your score: ${scoreOverAll.toInt()}\"\n            Timber.d(\"STORE RESULTS CALLED\")\n            mViewModel.storeResult(\n                challengeItem,\n                score = scoreOverAll,\n                detailResults = detailResults,\n                videoId = videoId,\n                player = player,\n                measurements = measurements\n            )\n        } else {\n            binding.tvYourScore.text = \"Your score: 0\"\n        }\n\n    }\n\n    private fun getOverallScore(): Float {\n        val overall = result?.get(\"OVERALL\") as DetailPoint?\n        return overall?.value ?: 0f\n    }\n\n    private fun collectDetailResults(): MutableList<DetailResult> {\n        val detailResults: MutableList<DetailResult> = mutableListOf()\n\n        result?.forEach { (key, value) ->\n            when (value) {\n                is DetailPoint -> {\n                    detailResults.add(\n                        DetailResult(\n                            value.id,\n                            value.value,\n                            if (value.maxValue >= 0) value.maxValue else 100f\n                        )\n                    )\n                }\n            }\n        }\n        return detailResults\n    }\n\n    private fun collectMeasurements(): List<Measurement> {\n        val measurements = mutableListOf<Measurement>()\n        result?.forEach { (key, value) ->\n            when (value) {\n                is Measurement -> {\n                    measurements.add(value)\n                }\n            }\n        }\n        return measurements\n    }\n\n    private fun initClicks() {\n        binding.ivPlay.setOnClickListener {\n            val intent = Intent(activity, VideoReplayActivity::class.java)\n            intent.putExtra(\"PLAYER\", 1)\n            intent.putExtra(\"EXERCISE\", challengeItem.id)\n            startActivity(intent)\n        }\n\n        binding.cvDetailAnalysis.setOnClickListener {\n            if (result != null) {\n                binding.ivPlay.show()\n                val tag = DetailAnalysisFragment.TAG\n                activity.showOrReplace(tag) {\n                    add(R.id.container, DetailAnalysisFragment.getInstance(challengeItem), tag)\n                        .addToBackStack(tag)\n                }\n            } else {\n                activity.makeToast(\"Failed exercise\")\n            }\n        }\n        binding.cvTryAgain.onClick {\n            startExercise()\n        }\n    }\n\n    fun startExercise() {\n        Log.d(\"CHALLENGE_INFO\", \"ROUTINE_ID \" + challengeItem.id.toString())\n        Log.d(\"CHALLENGE_INFO\", \"PLAYER_ID \" + player.id.toString())\n\n        val intent = Intent(context, ExerciseEngineActivity::class.java)\n        intent.putExtra(\"EXERCISE\", challengeItem.id.toInt())\n        intent.putExtra(\"PLAYER\", player.id.toInt())\n        intent.putExtra(\n            ChallengeInstructionFragment.SINGLE_USER_MODE,\n            mViewModel.settingsStorage.cameraMode\n        )\n        requireActivity().startActivityForResult(\n            intent,\n            ChallengeActivity.PRAAKTIS_SDK_REQUEST_CODE\n        )\n    }\n\n}
===================================================================
diff --git a/app/src/main/java/com/mobile/gympraaktis/ui/challenge/ResultChallengeFragment.kt b/app/src/main/java/com/mobile/gympraaktis/ui/challenge/ResultChallengeFragment.kt
--- a/app/src/main/java/com/mobile/gympraaktis/ui/challenge/ResultChallengeFragment.kt	
+++ b/app/src/main/java/com/mobile/gympraaktis/ui/challenge/ResultChallengeFragment.kt	
@@ -125,8 +125,8 @@
     private fun initClicks() {
         binding.ivPlay.setOnClickListener {
             val intent = Intent(activity, VideoReplayActivity::class.java)
-            intent.putExtra("PLAYER", 1)
-            intent.putExtra("EXERCISE", challengeItem.id)
+            intent.putExtra("PLAYER", 35)
+            intent.putExtra("EXERCISE", challengeItem.id.toInt())
             startActivity(intent)
         }
 
